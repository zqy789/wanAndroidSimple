apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.0"

    defaultConfig {
        applicationId "com.zqy.simple"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    dataBinding.enabled = true

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}
dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'

    //display
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation 'com.google.android.material:material:1.2.1'

    //------------jitPack
    def lifecycle_version = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    def nav_version = "2.3.0"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    def paging_version = "2.1.2"
    // For Kotlin use paging-runtime-ktx
    implementation "androidx.paging:paging-runtime:$paging_version"
    // alternatively - without Android dependencies for testing
    testImplementation "androidx.paging:paging-common:$paging_version"

    //--------------test
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    //--------------net work

    //okHttp
    def okHttp_v = '4.8.1'
    implementation("com.squareup.okhttp3:okhttp:${okHttp_v}")
    testImplementation("com.squareup.okhttp3:mockwebserver:${okHttp_v}")
    //retrofit
    def retrofit_v = '2.7.2'
    implementation ("com.squareup.retrofit2:retrofit:${retrofit_v}")
    implementation ("com.squareup.retrofit2:converter-gson:${retrofit_v}")
    //glide
    def glide_v = '4.11.0'
    implementation("com.github.bumptech.glide:glide:${glide_v}")
    implementation("com.github.bumptech.glide:okhttp3-integration:${glide_v}")
    //RecyclerView 集成库使你在你的应用中能够使用 RecyclerViewPreloader ，它可以在用户滑动 RecyclerView 时自动加载稍微超前一些的图片。
    //配合使用正确的图片尺寸和高效率的磁盘缓存策略，这个库可以显著减少用户滑动图片列表时看到的加载指示器的数量
    implementation ("com.github.bumptech.glide:recyclerview-integration:${glide_v}") {
        // Excludes the support library because it's already included by Glide.
        transitive = false
    }
    annotationProcessor("com.github.bumptech.glide:compiler:${glide_v}")


}

